{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nimport router from '../router';\nimport api from '../api';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    token: localStorage.getItem('token') || '',\n    user: JSON.parse(localStorage.getItem('user')) || null\n  },\n  getters: {\n    isLoggedIn: state => !!state.token,\n    currentUser: state => state.user,\n    isAdmin: state => state.user && state.user.roleId === 1,\n    isManager: state => state.user && (state.user.roleId === 1 || state.user.roleId === 3)\n  },\n  mutations: {\n    setToken(state, token) {\n      state.token = token;\n      localStorage.setItem('token', token);\n    },\n    setUser(state, user) {\n      state.user = user;\n      localStorage.setItem('user', JSON.stringify(user));\n    },\n    clearAuth(state) {\n      state.token = '';\n      state.user = null;\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    },\n    resetState(state) {\n      // 重置所有状态到初始值\n      Object.assign(state, {\n        token: '',\n        user: null\n        // 添加其他需要重置的状态...\n      });\n    }\n  },\n  actions: {\n    async login({\n      commit\n    }, loginData) {\n      try {\n        const response = await api.login(loginData);\n\n        // 保存 token 和用户信息\n        const {\n          token,\n          user\n        } = response;\n        commit('setToken', token);\n        commit('setUser', user);\n\n        // 设置全局默认 header\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        return user;\n      } catch (error) {\n        throw error;\n      }\n    },\n    logout({\n      commit\n    }) {\n      // 清除认证信息\n      commit('clearAuth');\n\n      // 清除 axios 默认请求头\n      delete axios.defaults.headers.common['Authorization'];\n\n      // 清除本地存储\n      localStorage.clear(); // 清除所有本地存储\n      sessionStorage.clear(); // 清除所有会话存储\n\n      // 清除 vuex store\n      commit('resetState');\n\n      // 清除路由缓存\n      if (router.app.$route.meta.keepAlive) {\n        const key = router.app.$route.name;\n        const cache = router.app.$refs.layout && router.app.$refs.layout.$refs.content;\n        if (cache && cache.cache) {\n          delete cache.cache[key];\n        }\n      }\n\n      // 跳转到登录页\n      if (router.currentRoute.path !== '/login') {\n        router.push('/login');\n      }\n\n      // 刷新页面以确保完全清除\n      window.location.reload();\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","axios","router","api","use","Store","state","token","localStorage","getItem","user","JSON","parse","getters","isLoggedIn","currentUser","isAdmin","roleId","isManager","mutations","setToken","setItem","setUser","stringify","clearAuth","removeItem","resetState","Object","assign","actions","login","commit","loginData","response","defaults","headers","common","error","logout","clear","sessionStorage","app","$route","meta","keepAlive","key","name","cache","$refs","layout","content","currentRoute","path","push","window","location","reload"],"sources":["D:/oasystem/src/main/resources/static/frontend/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios'\nimport router from '../router'\nimport api from '../api'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    token: localStorage.getItem('token') || '',\n    user: JSON.parse(localStorage.getItem('user')) || null\n  },\n  getters: {\n    isLoggedIn: state => !!state.token,\n    currentUser: state => state.user,\n    isAdmin: state => state.user && state.user.roleId === 1,\n    isManager: state => state.user && (state.user.roleId === 1 || state.user.roleId === 3)\n  },\n  mutations: {\n    setToken(state, token) {\n      state.token = token\n      localStorage.setItem('token', token)\n    },\n    setUser(state, user) {\n      state.user = user\n      localStorage.setItem('user', JSON.stringify(user))\n    },\n    clearAuth(state) {\n      state.token = ''\n      state.user = null\n      localStorage.removeItem('token')\n      localStorage.removeItem('user')\n    },\n    resetState(state) {\n      // 重置所有状态到初始值\n      Object.assign(state, {\n        token: '',\n        user: null,\n        // 添加其他需要重置的状态...\n      })\n    }\n  },\n  actions: {\n    async login({ commit }, loginData) {\n      try {\n        const response = await api.login(loginData)\n        \n        // 保存 token 和用户信息\n        const { token, user } = response\n        commit('setToken', token)\n        commit('setUser', user)\n        \n        // 设置全局默认 header\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\n        \n        return user\n      } catch (error) {\n        throw error\n      }\n    },\n    \n    logout({ commit }) {\n      // 清除认证信息\n      commit('clearAuth')\n      \n      // 清除 axios 默认请求头\n      delete axios.defaults.headers.common['Authorization']\n      \n      // 清除本地存储\n      localStorage.clear()  // 清除所有本地存储\n      sessionStorage.clear()  // 清除所有会话存储\n      \n      // 清除 vuex store\n      commit('resetState')\n      \n      // 清除路由缓存\n      if (router.app.$route.meta.keepAlive) {\n        const key = router.app.$route.name\n        const cache = router.app.$refs.layout && router.app.$refs.layout.$refs.content\n        if (cache && cache.cache) {\n          delete cache.cache[key]\n        }\n      }\n      \n      // 跳转到登录页\n      if (router.currentRoute.path !== '/login') {\n        router.push('/login')\n      }\n      \n      // 刷新页面以确保完全清除\n      window.location.reload()\n    }\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}