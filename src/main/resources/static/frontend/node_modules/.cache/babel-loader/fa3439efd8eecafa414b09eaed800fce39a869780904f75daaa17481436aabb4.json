{"ast":null,"code":"import api from '../api';\nimport { formatDate } from '../utils/date';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'Messages',\n  data() {\n    return {\n      activeTab: 'inbox',\n      loading: false,\n      receivedMessages: [],\n      sentMessages: [],\n      dialogVisible: false,\n      viewDialogVisible: false,\n      currentMessage: null,\n      sending: false,\n      users: [],\n      departments: [],\n      messageForm: {\n        type: 'single',\n        receiverId: '',\n        deptId: '',\n        title: '',\n        content: ''\n      },\n      rules: {\n        receiverId: [{\n          required: true,\n          message: '请选择接收者',\n          trigger: 'change'\n        }],\n        deptId: [{\n          required: true,\n          message: '请选择部门',\n          trigger: 'change'\n        }],\n        title: [{\n          required: true,\n          message: '请输入标题',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '请输入内容',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: {\n    ...mapGetters(['currentUser']),\n    canSendToDepartment() {\n      return this.currentUser && (this.currentUser.roleId === 1 || this.currentUser.roleId === 3);\n    }\n  },\n  created() {\n    this.fetchMessages();\n  },\n  methods: {\n    formatDate,\n    async fetchMessages() {\n      this.loading = true;\n      try {\n        const [received, sent] = await Promise.all([this.$http.get('/api/messages/my'), this.$http.get('/api/messages/sent')]);\n        this.receivedMessages = received.data;\n        this.sentMessages = sent.data;\n      } catch (error) {\n        console.error('获取消息失败:', error);\n        this.$message.error('获取消息失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    showSendDialog() {\n      this.dialogVisible = true;\n      this.messageForm = {\n        type: 'single',\n        receiverId: '',\n        deptId: '',\n        title: '',\n        content: ''\n      };\n    },\n    async sendMessage() {\n      this.$refs.messageForm.validate(async valid => {\n        if (valid) {\n          this.sending = true;\n          try {\n            if (this.messageForm.type === 'single') {\n              await api.sendMessage({\n                receiverId: this.messageForm.receiverId,\n                title: this.messageForm.title,\n                content: this.messageForm.content\n              });\n            } else {\n              await api.sendDepartmentMessage(this.messageForm.deptId, {\n                title: this.messageForm.title,\n                content: this.messageForm.content\n              });\n            }\n            this.$message.success('发送成功');\n            this.dialogVisible = false;\n            this.fetchMessages();\n          } catch (error) {\n            this.$message.error('发送失败');\n          } finally {\n            this.sending = false;\n          }\n        }\n      });\n    },\n    viewMessage(message) {\n      this.currentMessage = message;\n      this.viewDialogVisible = true;\n      if (!message.isRead) {\n        this.markAsRead(message);\n      }\n    },\n    async markAsRead(message) {\n      try {\n        await api.markMessageAsRead(message.messageId);\n        message.isRead = true;\n      } catch (error) {\n        console.error('标记已读失败:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","formatDate","mapGetters","name","data","activeTab","loading","receivedMessages","sentMessages","dialogVisible","viewDialogVisible","currentMessage","sending","users","departments","messageForm","type","receiverId","deptId","title","content","rules","required","message","trigger","computed","canSendToDepartment","currentUser","roleId","created","fetchMessages","methods","received","sent","Promise","all","$http","get","error","console","$message","showSendDialog","sendMessage","$refs","validate","valid","sendDepartmentMessage","success","viewMessage","isRead","markAsRead","markMessageAsRead","messageId"],"sources":["src/views/Messages.vue"],"sourcesContent":["<template>\n  <div class=\"page-container\">\n    <div class=\"page-header\">\n      <div class=\"title\">消息管理</div>\n      <el-button type=\"primary\" @click=\"showSendDialog\">发送消息</el-button>\n    </div>\n    \n    <el-tabs v-model=\"activeTab\">\n      <el-tab-pane label=\"收件箱\" name=\"inbox\">\n        <el-table :data=\"receivedMessages\" v-loading=\"loading\">\n          <el-table-column prop=\"title\" label=\"标题\" />\n          <el-table-column prop=\"sender.name\" label=\"发送人\" width=\"120\" />\n          <el-table-column prop=\"createTime\" label=\"发送时间\" width=\"160\">\n            <template slot-scope=\"scope\">\n              {{ formatDate(scope.row.createTime) }}\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"isRead\" label=\"状态\" width=\"100\">\n            <template slot-scope=\"scope\">\n              <el-tag :type=\"scope.row.isRead ? 'success' : 'warning'\">\n                {{ scope.row.isRead ? '已读' : '未读' }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"120\">\n            <template slot-scope=\"scope\">\n              <el-button type=\"text\" @click=\"viewMessage(scope.row)\">查看</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-tab-pane>\n      \n      <el-tab-pane label=\"已发送\" name=\"sent\">\n        <el-table :data=\"sentMessages\" v-loading=\"loading\">\n          <el-table-column prop=\"title\" label=\"标题\" />\n          <el-table-column prop=\"receiver.name\" label=\"接收人\" width=\"120\" />\n          <el-table-column prop=\"createTime\" label=\"发送时间\" width=\"160\">\n            <template slot-scope=\"scope\">\n              {{ formatDate(scope.row.createTime) }}\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"isRead\" label=\"状态\" width=\"100\">\n            <template slot-scope=\"scope\">\n              <el-tag :type=\"scope.row.isRead ? 'success' : 'warning'\">\n                {{ scope.row.isRead ? '已读' : '未读' }}\n              </el-tag>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-tab-pane>\n    </el-tabs>\n    \n    <!-- 发送消息对话框 -->\n    <el-dialog title=\"发送消息\" :visible.sync=\"dialogVisible\" width=\"500px\">\n      <el-form :model=\"messageForm\" :rules=\"rules\" ref=\"messageForm\" label-width=\"80px\">\n        <el-form-item label=\"发送类型\">\n          <el-radio-group v-model=\"messageForm.type\">\n            <el-radio :label=\"'single'\">个人</el-radio>\n            <el-radio :label=\"'department'\" v-if=\"canSendToDepartment\">部门</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        \n        <el-form-item label=\"接收者\" prop=\"receiverId\" v-if=\"messageForm.type === 'single'\">\n          <el-select v-model=\"messageForm.receiverId\" placeholder=\"请选择接收者\">\n            <el-option\n              v-for=\"user in users\"\n              :key=\"user.userId\"\n              :label=\"user.realName\"\n              :value=\"user.userId\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"部门\" prop=\"deptId\" v-if=\"messageForm.type === 'department'\">\n          <el-select v-model=\"messageForm.deptId\" placeholder=\"请选择部门\">\n            <el-option\n              v-for=\"dept in departments\"\n              :key=\"dept.deptId\"\n              :label=\"dept.deptName\"\n              :value=\"dept.deptId\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"标题\" prop=\"title\">\n          <el-input v-model=\"messageForm.title\"></el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"内容\" prop=\"content\">\n          <el-input type=\"textarea\" v-model=\"messageForm.content\" rows=\"4\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"sendMessage\" :loading=\"sending\">发送</el-button>\n      </div>\n    </el-dialog>\n    \n    <!-- 查看消息对话框 -->\n    <el-dialog title=\"消息详情\" :visible.sync=\"viewDialogVisible\" width=\"500px\">\n      <div v-if=\"currentMessage\">\n        <h3>{{ currentMessage.title }}</h3>\n        <div class=\"message-meta\">\n          <span>发送人：{{ currentMessage.sender.name }}</span>\n          <span>{{ formatDate(currentMessage.createTime) }}</span>\n        </div>\n        <div class=\"message-content\">{{ currentMessage.content }}</div>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport api from '../api'\nimport { formatDate } from '../utils/date'\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'Messages',\n  data() {\n    return {\n      activeTab: 'inbox',\n      loading: false,\n      receivedMessages: [],\n      sentMessages: [],\n      dialogVisible: false,\n      viewDialogVisible: false,\n      currentMessage: null,\n      sending: false,\n      users: [],\n      departments: [],\n      messageForm: {\n        type: 'single',\n        receiverId: '',\n        deptId: '',\n        title: '',\n        content: ''\n      },\n      rules: {\n        receiverId: [\n          { required: true, message: '请选择接收者', trigger: 'change' }\n        ],\n        deptId: [\n          { required: true, message: '请选择部门', trigger: 'change' }\n        ],\n        title: [\n          { required: true, message: '请输入标题', trigger: 'blur' }\n        ],\n        content: [\n          { required: true, message: '请输入内容', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['currentUser']),\n    canSendToDepartment() {\n      return this.currentUser && (this.currentUser.roleId === 1 || this.currentUser.roleId === 3);\n    }\n  },\n  created() {\n    this.fetchMessages()\n  },\n  methods: {\n    formatDate,\n    async fetchMessages() {\n      this.loading = true\n      try {\n        const [received, sent] = await Promise.all([\n          this.$http.get('/api/messages/my'),\n          this.$http.get('/api/messages/sent')\n        ])\n        this.receivedMessages = received.data\n        this.sentMessages = sent.data\n      } catch (error) {\n        console.error('获取消息失败:', error)\n        this.$message.error('获取消息失败')\n      } finally {\n        this.loading = false\n      }\n    },\n    showSendDialog() {\n      this.dialogVisible = true\n      this.messageForm = {\n        type: 'single',\n        receiverId: '',\n        deptId: '',\n        title: '',\n        content: ''\n      }\n    },\n    async sendMessage() {\n      this.$refs.messageForm.validate(async valid => {\n        if (valid) {\n          this.sending = true\n          try {\n            if (this.messageForm.type === 'single') {\n              await api.sendMessage({\n                receiverId: this.messageForm.receiverId,\n                title: this.messageForm.title,\n                content: this.messageForm.content\n              })\n            } else {\n              await api.sendDepartmentMessage(this.messageForm.deptId, {\n                title: this.messageForm.title,\n                content: this.messageForm.content\n              })\n            }\n            this.$message.success('发送成功')\n            this.dialogVisible = false\n            this.fetchMessages()\n          } catch (error) {\n            this.$message.error('发送失败')\n          } finally {\n            this.sending = false\n          }\n        }\n      })\n    },\n    viewMessage(message) {\n      this.currentMessage = message\n      this.viewDialogVisible = true\n      if (!message.isRead) {\n        this.markAsRead(message)\n      }\n    },\n    async markAsRead(message) {\n      try {\n        await api.markMessageAsRead(message.messageId)\n        message.isRead = true\n      } catch (error) {\n        console.error('标记已读失败:', error)\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.message-meta {\n  color: #666;\n  font-size: 14px;\n  margin: 10px 0;\n  display: flex;\n  justify-content: space-between;\n}\n\n.message-content {\n  margin-top: 20px;\n  white-space: pre-wrap;\n}\n</style> "],"mappings":"AAiHA,OAAAA,GAAA;AACA,SAAAC,UAAA;AACA,SAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,OAAA;MACAC,gBAAA;MACAC,YAAA;MACAC,aAAA;MACAC,iBAAA;MACAC,cAAA;MACAC,OAAA;MACAC,KAAA;MACAC,WAAA;MACAC,WAAA;QACAC,IAAA;QACAC,UAAA;QACAC,MAAA;QACAC,KAAA;QACAC,OAAA;MACA;MACAC,KAAA;QACAJ,UAAA,GACA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAN,MAAA,GACA;UAAAI,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAL,KAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,OAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAC,QAAA;IACA,GAAAvB,UAAA;IACAwB,oBAAA;MACA,YAAAC,WAAA,UAAAA,WAAA,CAAAC,MAAA,eAAAD,WAAA,CAAAC,MAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACA9B,UAAA;IACA,MAAA6B,cAAA;MACA,KAAAxB,OAAA;MACA;QACA,OAAA0B,QAAA,EAAAC,IAAA,UAAAC,OAAA,CAAAC,GAAA,EACA,KAAAC,KAAA,CAAAC,GAAA,sBACA,KAAAD,KAAA,CAAAC,GAAA,uBACA;QACA,KAAA9B,gBAAA,GAAAyB,QAAA,CAAA5B,IAAA;QACA,KAAAI,YAAA,GAAAyB,IAAA,CAAA7B,IAAA;MACA,SAAAkC,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;QACA,KAAAhC,OAAA;MACA;IACA;IACAmC,eAAA;MACA,KAAAhC,aAAA;MACA,KAAAM,WAAA;QACAC,IAAA;QACAC,UAAA;QACAC,MAAA;QACAC,KAAA;QACAC,OAAA;MACA;IACA;IACA,MAAAsB,YAAA;MACA,KAAAC,KAAA,CAAA5B,WAAA,CAAA6B,QAAA,OAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAjC,OAAA;UACA;YACA,SAAAG,WAAA,CAAAC,IAAA;cACA,MAAAhB,GAAA,CAAA0C,WAAA;gBACAzB,UAAA,OAAAF,WAAA,CAAAE,UAAA;gBACAE,KAAA,OAAAJ,WAAA,CAAAI,KAAA;gBACAC,OAAA,OAAAL,WAAA,CAAAK;cACA;YACA;cACA,MAAApB,GAAA,CAAA8C,qBAAA,MAAA/B,WAAA,CAAAG,MAAA;gBACAC,KAAA,OAAAJ,WAAA,CAAAI,KAAA;gBACAC,OAAA,OAAAL,WAAA,CAAAK;cACA;YACA;YACA,KAAAoB,QAAA,CAAAO,OAAA;YACA,KAAAtC,aAAA;YACA,KAAAqB,aAAA;UACA,SAAAQ,KAAA;YACA,KAAAE,QAAA,CAAAF,KAAA;UACA;YACA,KAAA1B,OAAA;UACA;QACA;MACA;IACA;IACAoC,YAAAzB,OAAA;MACA,KAAAZ,cAAA,GAAAY,OAAA;MACA,KAAAb,iBAAA;MACA,KAAAa,OAAA,CAAA0B,MAAA;QACA,KAAAC,UAAA,CAAA3B,OAAA;MACA;IACA;IACA,MAAA2B,WAAA3B,OAAA;MACA;QACA,MAAAvB,GAAA,CAAAmD,iBAAA,CAAA5B,OAAA,CAAA6B,SAAA;QACA7B,OAAA,CAAA0B,MAAA;MACA,SAAAX,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}