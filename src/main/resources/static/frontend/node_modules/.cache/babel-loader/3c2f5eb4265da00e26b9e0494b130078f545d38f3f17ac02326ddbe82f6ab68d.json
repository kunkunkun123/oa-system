{"ast":null,"code":"import api from '../api';\nexport default {\n  name: 'Departments',\n  data() {\n    return {\n      loading: false,\n      submitting: false,\n      departments: [],\n      users: [],\n      dialogVisible: false,\n      managerDialogVisible: false,\n      membersDialogVisible: false,\n      currentDepartment: null,\n      departmentUsers: [],\n      departmentForm: {\n        deptName: ''\n      },\n      managerForm: {\n        managerId: ''\n      },\n      rules: {\n        deptName: [{\n          required: true,\n          message: '请输入部门名称',\n          trigger: 'blur'\n        }]\n      },\n      managerRules: {\n        managerId: [{\n          required: true,\n          message: '请选择部门经理',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  computed: {\n    dialogTitle() {\n      return this.currentDepartment ? '编辑部门' : '创建部门';\n    },\n    availableManagers() {\n      return this.users.filter(u => u.roleId === 3);\n    }\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      this.loading = true;\n      try {\n        const [departments, users] = await Promise.all([api.getDepartments(), api.getUsers()]);\n        this.departments = departments;\n        this.users = users;\n      } catch (error) {\n        this.$message.error('获取数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    getDepartmentName(deptId) {\n      const dept = this.departments.find(d => d.deptId === deptId);\n      return dept ? dept.deptName : '未分配';\n    },\n    getDepartmentUserCount(deptId) {\n      return this.users.filter(u => u.deptId === deptId).length;\n    },\n    getRoleType(roleId) {\n      const types = {\n        1: 'danger',\n        2: 'warning',\n        3: 'success',\n        4: 'info'\n      };\n      return types[roleId] || 'info';\n    },\n    getRoleText(roleId) {\n      const texts = {\n        1: '系统管理员',\n        2: '总经理',\n        3: '部门经理',\n        4: '普通员工'\n      };\n      return texts[roleId] || '未知';\n    },\n    showCreateDialog() {\n      this.currentDepartment = null;\n      this.dialogVisible = true;\n      this.departmentForm = {\n        deptName: ''\n      };\n    },\n    showEditDialog(department) {\n      this.currentDepartment = department;\n      this.dialogVisible = true;\n      this.departmentForm = {\n        deptName: department.deptName\n      };\n    },\n    showAssignManagerDialog(department) {\n      this.currentDepartment = department;\n      this.managerDialogVisible = true;\n      this.managerForm = {\n        managerId: department.managerId || ''\n      };\n    },\n    showMembersDialog(department) {\n      this.currentDepartment = department;\n      this.membersDialogVisible = true;\n      this.departmentUsers = this.users.filter(u => u.deptId === department.deptId);\n    },\n    async submitDepartment() {\n      this.$refs.departmentForm.validate(async valid => {\n        if (valid) {\n          this.submitting = true;\n          try {\n            if (this.currentDepartment) {\n              await api.updateDepartment(this.currentDepartment.deptId, this.departmentForm);\n              this.$message.success('更新成功');\n            } else {\n              await api.createDepartment(this.departmentForm);\n              this.$message.success('创建成功');\n            }\n            this.dialogVisible = false;\n            this.fetchData();\n          } catch (error) {\n            this.$message.error(this.currentDepartment ? '更新失败' : '创建失败');\n          } finally {\n            this.submitting = false;\n          }\n        }\n      });\n    },\n    async assignManager() {\n      this.$refs.managerForm.validate(async valid => {\n        if (valid) {\n          this.submitting = true;\n          try {\n            await api.assignManager(this.currentDepartment.deptId, this.managerForm.managerId);\n            this.$message.success('指定成功');\n            this.managerDialogVisible = false;\n            this.fetchData();\n          } catch (error) {\n            this.$message.error('指定失败');\n          } finally {\n            this.submitting = false;\n          }\n        }\n      });\n    },\n    async handleDelete(department) {\n      try {\n        await this.$confirm('确认删除该部门吗？', '提示', {\n          type: 'warning'\n        });\n        await api.deleteDepartment(department.deptId);\n        this.$message.success('删除成功');\n        this.fetchData();\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('删除失败');\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","name","data","loading","submitting","departments","users","dialogVisible","managerDialogVisible","membersDialogVisible","currentDepartment","departmentUsers","departmentForm","deptName","managerForm","managerId","rules","required","message","trigger","managerRules","computed","dialogTitle","availableManagers","filter","u","roleId","created","fetchData","methods","Promise","all","getDepartments","getUsers","error","$message","getDepartmentName","deptId","dept","find","d","getDepartmentUserCount","length","getRoleType","types","getRoleText","texts","showCreateDialog","showEditDialog","department","showAssignManagerDialog","showMembersDialog","submitDepartment","$refs","validate","valid","updateDepartment","success","createDepartment","assignManager","handleDelete","$confirm","type","deleteDepartment"],"sources":["src/views/Departments.vue"],"sourcesContent":["<template>\n  <div class=\"page-container\">\n    <div class=\"page-header\">\n      <div class=\"title\">部门管理</div>\n      <el-button type=\"primary\" @click=\"showCreateDialog\">创建部门</el-button>\n    </div>\n    \n    <el-table :data=\"departments\" v-loading=\"loading\">\n      <el-table-column prop=\"deptName\" label=\"部门名称\" />\n      <el-table-column label=\"部门经理\" width=\"180\">\n        <template slot-scope=\"scope\">\n          <template v-if=\"scope.row.manager\">\n            {{ scope.row.manager.name }}\n          </template>\n          <template v-else>\n            <el-tag type=\"info\">暂无</el-tag>\n          </template>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"部门人数\" width=\"120\">\n        <template slot-scope=\"scope\">\n          {{ getDepartmentUserCount(scope.row.deptId) }}\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\" width=\"250\">\n        <template slot-scope=\"scope\">\n          <el-button type=\"text\" @click=\"showEditDialog(scope.row)\">编辑</el-button>\n          <el-button type=\"text\" @click=\"showAssignManagerDialog(scope.row)\">指定经理</el-button>\n          <el-button type=\"text\" @click=\"showMembersDialog(scope.row)\">查看成员</el-button>\n          <el-button type=\"text\" class=\"danger\" @click=\"handleDelete(scope.row)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    \n    <!-- 创建/编辑部门对话框 -->\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\" width=\"500px\">\n      <el-form :model=\"departmentForm\" :rules=\"rules\" ref=\"departmentForm\" label-width=\"80px\">\n        <el-form-item label=\"部门名称\" prop=\"deptName\">\n          <el-input v-model=\"departmentForm.deptName\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"submitDepartment\" :loading=\"submitting\">确定</el-button>\n      </div>\n    </el-dialog>\n    \n    <!-- 指定部门经理对话框 -->\n    <el-dialog title=\"指定部门经理\" :visible.sync=\"managerDialogVisible\" width=\"500px\">\n      <el-form :model=\"managerForm\" :rules=\"managerRules\" ref=\"managerForm\" label-width=\"80px\">\n        <el-form-item label=\"部门经理\" prop=\"managerId\">\n          <el-select v-model=\"managerForm.managerId\" placeholder=\"请选择部门经理\">\n            <el-option\n              v-for=\"user in availableManagers\"\n              :key=\"user.userId\"\n              :label=\"user.name\"\n              :value=\"user.userId\">\n              <span>{{ user.name }}</span>\n              <span style=\"float: right; color: #8492a6; font-size: 13px\">\n                {{ getDepartmentName(user.deptId) }}\n              </span>\n            </el-option>\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"managerDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"assignManager\" :loading=\"submitting\">确定</el-button>\n      </div>\n    </el-dialog>\n    \n    <!-- 部门成员对话框 -->\n    <el-dialog :title=\"`${currentDepartment?.deptName || ''} - 部门成员`\" \n               :visible.sync=\"membersDialogVisible\" \n               width=\"800px\">\n      <el-table :data=\"departmentUsers\" v-loading=\"loading\">\n        <el-table-column prop=\"name\" label=\"姓名\" width=\"120\" />\n        <el-table-column prop=\"username\" label=\"用户名\" width=\"150\" />\n        <el-table-column label=\"角色\" width=\"120\">\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getRoleType(scope.row.roleId)\">\n              {{ getRoleText(scope.row.roleId) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"email\" label=\"邮箱\" />\n        <el-table-column prop=\"phone\" label=\"电话\" width=\"150\" />\n      </el-table>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport api from '../api'\n\nexport default {\n  name: 'Departments',\n  data() {\n    return {\n      loading: false,\n      submitting: false,\n      departments: [],\n      users: [],\n      dialogVisible: false,\n      managerDialogVisible: false,\n      membersDialogVisible: false,\n      currentDepartment: null,\n      departmentUsers: [],\n      departmentForm: {\n        deptName: ''\n      },\n      managerForm: {\n        managerId: ''\n      },\n      rules: {\n        deptName: [\n          { required: true, message: '请输入部门名称', trigger: 'blur' }\n        ]\n      },\n      managerRules: {\n        managerId: [\n          { required: true, message: '请选择部门经理', trigger: 'change' }\n        ]\n      }\n    }\n  },\n  computed: {\n    dialogTitle() {\n      return this.currentDepartment ? '编辑部门' : '创建部门'\n    },\n    availableManagers() {\n      return this.users.filter(u => u.roleId === 3)\n    }\n  },\n  created() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      this.loading = true\n      try {\n        const [departments, users] = await Promise.all([\n          api.getDepartments(),\n          api.getUsers()\n        ])\n        this.departments = departments\n        this.users = users\n      } catch (error) {\n        this.$message.error('获取数据失败')\n      } finally {\n        this.loading = false\n      }\n    },\n    getDepartmentName(deptId) {\n      const dept = this.departments.find(d => d.deptId === deptId)\n      return dept ? dept.deptName : '未分配'\n    },\n    getDepartmentUserCount(deptId) {\n      return this.users.filter(u => u.deptId === deptId).length\n    },\n    getRoleType(roleId) {\n      const types = {\n        1: 'danger',\n        2: 'warning',\n        3: 'success',\n        4: 'info'\n      }\n      return types[roleId] || 'info'\n    },\n    getRoleText(roleId) {\n      const texts = {\n        1: '系统管理员',\n        2: '总经理',\n        3: '部门经理',\n        4: '普通员工'\n      }\n      return texts[roleId] || '未知'\n    },\n    showCreateDialog() {\n      this.currentDepartment = null\n      this.dialogVisible = true\n      this.departmentForm = { deptName: '' }\n    },\n    showEditDialog(department) {\n      this.currentDepartment = department\n      this.dialogVisible = true\n      this.departmentForm = {\n        deptName: department.deptName\n      }\n    },\n    showAssignManagerDialog(department) {\n      this.currentDepartment = department\n      this.managerDialogVisible = true\n      this.managerForm = {\n        managerId: department.managerId || ''\n      }\n    },\n    showMembersDialog(department) {\n      this.currentDepartment = department\n      this.membersDialogVisible = true\n      this.departmentUsers = this.users.filter(u => u.deptId === department.deptId)\n    },\n    async submitDepartment() {\n      this.$refs.departmentForm.validate(async valid => {\n        if (valid) {\n          this.submitting = true\n          try {\n            if (this.currentDepartment) {\n              await api.updateDepartment(this.currentDepartment.deptId, this.departmentForm)\n              this.$message.success('更新成功')\n            } else {\n              await api.createDepartment(this.departmentForm)\n              this.$message.success('创建成功')\n            }\n            this.dialogVisible = false\n            this.fetchData()\n          } catch (error) {\n            this.$message.error(this.currentDepartment ? '更新失败' : '创建失败')\n          } finally {\n            this.submitting = false\n          }\n        }\n      })\n    },\n    async assignManager() {\n      this.$refs.managerForm.validate(async valid => {\n        if (valid) {\n          this.submitting = true\n          try {\n            await api.assignManager(\n              this.currentDepartment.deptId,\n              this.managerForm.managerId\n            )\n            this.$message.success('指定成功')\n            this.managerDialogVisible = false\n            this.fetchData()\n          } catch (error) {\n            this.$message.error('指定失败')\n          } finally {\n            this.submitting = false\n          }\n        }\n      })\n    },\n    async handleDelete(department) {\n      try {\n        await this.$confirm('确认删除该部门吗？', '提示', {\n          type: 'warning'\n        })\n        await api.deleteDepartment(department.deptId)\n        this.$message.success('删除成功')\n        this.fetchData()\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('删除失败')\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.danger {\n  color: #F56C6C;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}