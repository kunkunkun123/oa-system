{"ast":null,"code":"import api from '../api';\nimport { formatDate } from '../utils/date';\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      unreadMessages: [],\n      todayTasks: [],\n      department: null,\n      departmentUsers: [],\n      loading: false\n    };\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    formatDate,\n    async fetchData() {\n      this.loading = true;\n      try {\n        const [tasks, messages] = await Promise.all([api.getMyTasks(), api.getMessages()]);\n        this.todayTasks = tasks.filter(task => task.dueDate && task.dueDate.startsWith(this.today));\n        this.unreadMessages = messages.filter(msg => msg && !msg.isRead);\n\n        // 统计数据\n        this.statistics = {\n          totalTasks: tasks.length,\n          pendingTasks: tasks.filter(task => task && task.status === 0).length,\n          inProgressTasks: tasks.filter(task => task && task.status === 1).length,\n          completedTasks: tasks.filter(task => task && task.status === 2).length,\n          unreadMessages: this.unreadMessages.length\n        };\n        if (this.$store.getters.currentUser.deptId) {\n          const [dept, users] = await Promise.all([api.getDepartments(), api.getUsers()]);\n          console.log('部门列表:', dept);\n          console.log('当前用户部门ID:', this.$store.getters.currentUser.deptId);\n          const department = dept.find(d => d.deptId === this.$store.getters.currentUser.deptId);\n          console.log('找到的部门:', department);\n          this.department = department;\n          this.departmentUsers = users.filter(u => u.deptId === this.$store.getters.currentUser.deptId);\n        }\n      } catch (error) {\n        console.error('获取数据失败:', error);\n        this.$message.error('获取数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    computed: {\n      today() {\n        const now = new Date();\n        return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`;\n      }\n    },\n    getStatusText(status) {\n      if (status === null || status === undefined) return '未知';\n      const texts = {\n        0: '待处理',\n        1: '进行中',\n        2: '已完成'\n      };\n      return texts[status] ?? '未知';\n    },\n    getStatusType(status) {\n      if (status === null || status === undefined) return '';\n      const types = {\n        0: 'info',\n        1: 'warning',\n        2: 'success'\n      };\n      return types[status] ?? '';\n    }\n  }\n};","map":{"version":3,"names":["api","formatDate","name","data","unreadMessages","todayTasks","department","departmentUsers","loading","created","fetchData","methods","tasks","messages","Promise","all","getMyTasks","getMessages","filter","task","dueDate","startsWith","today","msg","isRead","statistics","totalTasks","length","pendingTasks","status","inProgressTasks","completedTasks","$store","getters","currentUser","deptId","dept","users","getDepartments","getUsers","console","log","find","d","u","error","$message","computed","now","Date","getFullYear","String","getMonth","padStart","getDate","getStatusText","undefined","texts","getStatusType","types"],"sources":["src/views/Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <el-row :gutter=\"20\">\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\">\n            <span>未读消息</span>\n            <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"$router.push('/messages')\">\n              查看全部\n            </el-button>\n          </div>\n          <div v-if=\"unreadMessages.length\">\n            <div v-for=\"msg in unreadMessages\" :key=\"msg.messageId\" class=\"message-item\">\n              <p class=\"title\">{{ msg.title }}</p>\n              <p class=\"meta\">\n                <span>发送人：{{ msg.sender.realName }}</span>\n                <span>{{ formatDate(msg.createTime) }}</span>\n              </p>\n            </div>\n          </div>\n          <div v-else class=\"empty-text\">暂无未读消息</div>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\">\n            <span>今日任务</span>\n            <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"$router.push('/tasks')\">\n              查看全部\n            </el-button>\n          </div>\n          <div v-if=\"todayTasks.length\">\n            <div v-for=\"task in todayTasks\" :key=\"task.taskId\" class=\"task-item\">\n              <p class=\"title\">{{ task.title }}</p>\n              <p class=\"meta\">\n                <span>创建人：{{ task.creator.realName }}</span>\n                <el-tag :type=\"getStatusType(task.status)\">{{ getStatusText(task.status) }}</el-tag>\n              </p>\n            </div>\n          </div>\n          <div v-else class=\"empty-text\">暂无今日任务</div>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\">\n            <span>部门信息</span>\n          </div>\n          <div v-if=\"department\">\n            <p>部门名称：{{ department.deptName }}</p>\n            <p>部门经理：{{ department.manager ? department.manager.name : '暂无' }}</p>\n            <p>部门人数：{{ departmentUsers.length }}人</p>\n          </div>\n          <div v-else class=\"empty-text\">暂无部门信息</div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport api from '../api'\nimport { formatDate } from '../utils/date'\n\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      unreadMessages: [],\n      todayTasks: [],\n      department: null,\n      departmentUsers: [],\n      loading: false\n    }\n  },\n  created() {\n    this.fetchData()\n  },\n  methods: {\n    formatDate,\n    async fetchData() {\n      this.loading = true\n      try {\n        const [tasks, messages] = await Promise.all([\n          api.getMyTasks(),\n          api.getMessages()\n        ])\n        \n        this.todayTasks = tasks.filter(task => task.dueDate && task.dueDate.startsWith(this.today))\n        \n        this.unreadMessages = messages.filter(msg => msg && !msg.isRead)\n        \n        // 统计数据\n        this.statistics = {\n          totalTasks: tasks.length,\n          pendingTasks: tasks.filter(task => task && task.status === 0).length,\n          inProgressTasks: tasks.filter(task => task && task.status === 1).length,\n          completedTasks: tasks.filter(task => task && task.status === 2).length,\n          unreadMessages: this.unreadMessages.length\n        }\n        \n        if (this.$store.getters.currentUser.deptId) {\n          const [dept, users] = await Promise.all([\n            api.getDepartments(),\n            api.getUsers()\n          ])\n          console.log('部门列表:', dept)\n          console.log('当前用户部门ID:', this.$store.getters.currentUser.deptId)\n          const department = dept.find(d => d.deptId === this.$store.getters.currentUser.deptId)\n          console.log('找到的部门:', department)\n          this.department = department\n          this.departmentUsers = users.filter(u => u.deptId === this.$store.getters.currentUser.deptId)\n        }\n      } catch (error) {\n        console.error('获取数据失败:', error)\n        this.$message.error('获取数据失败')\n      } finally {\n        this.loading = false\n      }\n    },\n    computed: {\n      today() {\n        const now = new Date()\n        return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}`\n      }\n    },\n    getStatusText(status) {\n      if (status === null || status === undefined) return '未知'\n      const texts = {\n        0: '待处理',\n        1: '进行中',\n        2: '已完成'\n      }\n      return texts[status] ?? '未知'\n    },\n    getStatusType(status) {\n      if (status === null || status === undefined) return ''\n      const types = {\n        0: 'info',\n        1: 'warning',\n        2: 'success'\n      }\n      return types[status] ?? ''\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dashboard {\n  padding: 20px;\n}\n\n.box-card {\n  margin-bottom: 20px;\n}\n\n.message-item, .task-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #eee;\n  \n  &:last-child {\n    border-bottom: none;\n  }\n  \n  .title {\n    margin: 0 0 5px;\n    font-size: 14px;\n  }\n  \n  .meta {\n    margin: 0;\n    font-size: 12px;\n    color: #999;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n}\n\n.empty-text {\n  text-align: center;\n  color: #999;\n  padding: 20px 0;\n}\n</style> "],"mappings":"AA+DA,OAAAA,GAAA;AACA,SAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,cAAA;MACAC,UAAA;MACAC,UAAA;MACAC,eAAA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,OAAA;IACAV,UAAA;IACA,MAAAS,UAAA;MACA,KAAAF,OAAA;MACA;QACA,OAAAI,KAAA,EAAAC,QAAA,UAAAC,OAAA,CAAAC,GAAA,EACAf,GAAA,CAAAgB,UAAA,IACAhB,GAAA,CAAAiB,WAAA,GACA;QAEA,KAAAZ,UAAA,GAAAO,KAAA,CAAAM,MAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAC,OAAA,IAAAD,IAAA,CAAAC,OAAA,CAAAC,UAAA,MAAAC,KAAA;QAEA,KAAAlB,cAAA,GAAAS,QAAA,CAAAK,MAAA,CAAAK,GAAA,IAAAA,GAAA,KAAAA,GAAA,CAAAC,MAAA;;QAEA;QACA,KAAAC,UAAA;UACAC,UAAA,EAAAd,KAAA,CAAAe,MAAA;UACAC,YAAA,EAAAhB,KAAA,CAAAM,MAAA,CAAAC,IAAA,IAAAA,IAAA,IAAAA,IAAA,CAAAU,MAAA,QAAAF,MAAA;UACAG,eAAA,EAAAlB,KAAA,CAAAM,MAAA,CAAAC,IAAA,IAAAA,IAAA,IAAAA,IAAA,CAAAU,MAAA,QAAAF,MAAA;UACAI,cAAA,EAAAnB,KAAA,CAAAM,MAAA,CAAAC,IAAA,IAAAA,IAAA,IAAAA,IAAA,CAAAU,MAAA,QAAAF,MAAA;UACAvB,cAAA,OAAAA,cAAA,CAAAuB;QACA;QAEA,SAAAK,MAAA,CAAAC,OAAA,CAAAC,WAAA,CAAAC,MAAA;UACA,OAAAC,IAAA,EAAAC,KAAA,UAAAvB,OAAA,CAAAC,GAAA,EACAf,GAAA,CAAAsC,cAAA,IACAtC,GAAA,CAAAuC,QAAA,GACA;UACAC,OAAA,CAAAC,GAAA,UAAAL,IAAA;UACAI,OAAA,CAAAC,GAAA,mBAAAT,MAAA,CAAAC,OAAA,CAAAC,WAAA,CAAAC,MAAA;UACA,MAAA7B,UAAA,GAAA8B,IAAA,CAAAM,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAR,MAAA,UAAAH,MAAA,CAAAC,OAAA,CAAAC,WAAA,CAAAC,MAAA;UACAK,OAAA,CAAAC,GAAA,WAAAnC,UAAA;UACA,KAAAA,UAAA,GAAAA,UAAA;UACA,KAAAC,eAAA,GAAA8B,KAAA,CAAAnB,MAAA,CAAA0B,CAAA,IAAAA,CAAA,CAAAT,MAAA,UAAAH,MAAA,CAAAC,OAAA,CAAAC,WAAA,CAAAC,MAAA;QACA;MACA,SAAAU,KAAA;QACAL,OAAA,CAAAK,KAAA,YAAAA,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;QACA,KAAArC,OAAA;MACA;IACA;IACAuC,QAAA;MACAzB,MAAA;QACA,MAAA0B,GAAA,OAAAC,IAAA;QACA,UAAAD,GAAA,CAAAE,WAAA,MAAAC,MAAA,CAAAH,GAAA,CAAAI,QAAA,QAAAC,QAAA,YAAAF,MAAA,CAAAH,GAAA,CAAAM,OAAA,IAAAD,QAAA;MACA;IACA;IACAE,cAAA1B,MAAA;MACA,IAAAA,MAAA,aAAAA,MAAA,KAAA2B,SAAA;MACA,MAAAC,KAAA;QACA;QACA;QACA;MACA;MACA,OAAAA,KAAA,CAAA5B,MAAA;IACA;IACA6B,cAAA7B,MAAA;MACA,IAAAA,MAAA,aAAAA,MAAA,KAAA2B,SAAA;MACA,MAAAG,KAAA;QACA;QACA;QACA;MACA;MACA,OAAAA,KAAA,CAAA9B,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}