{"ast":null,"code":"import axios from 'axios';\nimport { Message } from 'element-ui';\nimport store from '@/store';\nimport router from '@/router';\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: '/api',\n  timeout: 5000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  if (store.getters.token) {\n    // 让每个请求携带token\n    config.headers['Authorization'] = 'Bearer ' + store.getters.token;\n  }\n  return config;\n}, error => {\n  // 处理请求错误\n  console.log(error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => response.data, error => {\n  console.log('API Error:', error);\n  if (error.response) {\n    const errorMessage = error.response.data?.message || '请求失败';\n    Message.error(errorMessage);\n    if (error.response.status === 401) {\n      store.dispatch('logout');\n      router.push('/login');\n    }\n  } else {\n    Message.error('网络错误，请检查您的网络连接');\n  }\n  return Promise.reject(error.response?.data || error);\n});\nexport default service;","map":{"version":3,"names":["axios","Message","store","router","service","create","baseURL","timeout","interceptors","request","use","config","getters","token","headers","error","console","log","Promise","reject","response","data","errorMessage","message","status","dispatch","push"],"sources":["D:/oasystem/src/main/resources/static/frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { Message } from 'element-ui'\nimport store from '@/store'\nimport router from '@/router'\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: '/api',\n  timeout: 5000 // 请求超时时间\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    // 在发送请求之前做些什么\n    if (store.getters.token) {\n      // 让每个请求携带token\n      config.headers['Authorization'] = 'Bearer ' + store.getters.token\n    }\n    return config\n  },\n  error => {\n    // 处理请求错误\n    console.log(error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => response.data,\n  error => {\n    console.log('API Error:', error)\n    \n    if (error.response) {\n      const errorMessage = error.response.data?.message || '请求失败'\n      Message.error(errorMessage)\n      \n      if (error.response.status === 401) {\n        store.dispatch('logout')\n        router.push('/login')\n      }\n    } else {\n      Message.error('网络错误，请检查您的网络连接')\n    }\n    \n    return Promise.reject(error.response?.data || error)\n  }\n)\n\nexport default service "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC3BC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,IAAI,CAAC;AAChB,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAI;EACR;EACA,IAAIT,KAAK,CAACU,OAAO,CAACC,KAAK,EAAE;IACvB;IACAF,MAAM,CAACG,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGZ,KAAK,CAACU,OAAO,CAACC,KAAK;EACnE;EACA,OAAOF,MAAM;AACf,CAAC,EACDI,KAAK,IAAI;EACP;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,OAAO,CAACI,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC/BU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EACzBN,KAAK,IAAI;EACPC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,KAAK,CAAC;EAEhC,IAAIA,KAAK,CAACK,QAAQ,EAAE;IAClB,MAAME,YAAY,GAAGP,KAAK,CAACK,QAAQ,CAACC,IAAI,EAAEE,OAAO,IAAI,MAAM;IAC3DtB,OAAO,CAACc,KAAK,CAACO,YAAY,CAAC;IAE3B,IAAIP,KAAK,CAACK,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACjCtB,KAAK,CAACuB,QAAQ,CAAC,QAAQ,CAAC;MACxBtB,MAAM,CAACuB,IAAI,CAAC,QAAQ,CAAC;IACvB;EACF,CAAC,MAAM;IACLzB,OAAO,CAACc,KAAK,CAAC,gBAAgB,CAAC;EACjC;EAEA,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAACK,QAAQ,EAAEC,IAAI,IAAIN,KAAK,CAAC;AACtD,CACF,CAAC;AAED,eAAeX,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}