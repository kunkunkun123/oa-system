{"ast":null,"code":"import api from '../api';\nimport { formatDate } from '../utils/date';\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      unreadMessages: [],\n      todayTasks: [],\n      department: null,\n      departmentUsers: []\n    };\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    formatDate,\n    async fetchData() {\n      try {\n        const [messages, tasks] = await Promise.all([api.getMessages(), api.getTasks()]);\n        this.unreadMessages = messages.filter(msg => !msg.isRead).slice(0, 5);\n        this.todayTasks = tasks.filter(task => {\n          const today = new Date().toISOString().split('T')[0];\n          return task.dueDate.startsWith(today);\n        }).slice(0, 5);\n        if (this.$store.getters.currentUser.deptId) {\n          const [dept, users] = await Promise.all([api.getDepartments(), api.getUsers()]);\n          this.department = dept.find(d => d.deptId === this.$store.getters.currentUser.deptId);\n          this.departmentUsers = users.filter(u => u.deptId === this.$store.getters.currentUser.deptId);\n        }\n      } catch (error) {\n        this.$message.error('获取数据失败');\n      }\n    },\n    getStatusType(status) {\n      const types = {\n        0: 'info',\n        1: 'warning',\n        2: 'success'\n      };\n      return types[status] || 'info';\n    },\n    getStatusText(status) {\n      const texts = {\n        0: '待处理',\n        1: '进行中',\n        2: '已完成'\n      };\n      return texts[status] || '未知';\n    }\n  }\n};","map":{"version":3,"names":["api","formatDate","name","data","unreadMessages","todayTasks","department","departmentUsers","created","fetchData","methods","messages","tasks","Promise","all","getMessages","getTasks","filter","msg","isRead","slice","task","today","Date","toISOString","split","dueDate","startsWith","$store","getters","currentUser","deptId","dept","users","getDepartments","getUsers","find","d","u","error","$message","getStatusType","status","types","getStatusText","texts"],"sources":["src/views/Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <el-row :gutter=\"20\">\n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\">\n            <span>未读消息</span>\n            <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"$router.push('/messages')\">\n              查看全部\n            </el-button>\n          </div>\n          <div v-if=\"unreadMessages.length\">\n            <div v-for=\"msg in unreadMessages\" :key=\"msg.messageId\" class=\"message-item\">\n              <p class=\"title\">{{ msg.title }}</p>\n              <p class=\"meta\">\n                <span>发送人：{{ msg.sender.realName }}</span>\n                <span>{{ formatDate(msg.createTime) }}</span>\n              </p>\n            </div>\n          </div>\n          <div v-else class=\"empty-text\">暂无未读消息</div>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\">\n            <span>今日任务</span>\n            <el-button style=\"float: right; padding: 3px 0\" type=\"text\" @click=\"$router.push('/tasks')\">\n              查看全部\n            </el-button>\n          </div>\n          <div v-if=\"todayTasks.length\">\n            <div v-for=\"task in todayTasks\" :key=\"task.taskId\" class=\"task-item\">\n              <p class=\"title\">{{ task.title }}</p>\n              <p class=\"meta\">\n                <span>创建人：{{ task.creator.realName }}</span>\n                <el-tag :type=\"getStatusType(task.status)\">{{ getStatusText(task.status) }}</el-tag>\n              </p>\n            </div>\n          </div>\n          <div v-else class=\"empty-text\">暂无今日任务</div>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"8\">\n        <el-card class=\"box-card\">\n          <div slot=\"header\">\n            <span>部门信息</span>\n          </div>\n          <div v-if=\"department\">\n            <p>部门名称：{{ department.deptName }}</p>\n            <p>部门经理：{{ department.manager ? department.manager.name : '暂无' }}</p>\n            <p>部门人数：{{ departmentUsers.length }}人</p>\n          </div>\n          <div v-else class=\"empty-text\">暂无部门信息</div>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport api from '../api'\nimport { formatDate } from '../utils/date'\n\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      unreadMessages: [],\n      todayTasks: [],\n      department: null,\n      departmentUsers: []\n    }\n  },\n  created() {\n    this.fetchData()\n  },\n  methods: {\n    formatDate,\n    async fetchData() {\n      try {\n        const [messages, tasks] = await Promise.all([\n          api.getMessages(),\n          api.getTasks()\n        ])\n        \n        this.unreadMessages = messages.filter(msg => !msg.isRead).slice(0, 5)\n        this.todayTasks = tasks.filter(task => {\n          const today = new Date().toISOString().split('T')[0]\n          return task.dueDate.startsWith(today)\n        }).slice(0, 5)\n        \n        if (this.$store.getters.currentUser.deptId) {\n          const [dept, users] = await Promise.all([\n            api.getDepartments(),\n            api.getUsers()\n          ])\n          this.department = dept.find(d => d.deptId === this.$store.getters.currentUser.deptId)\n          this.departmentUsers = users.filter(u => u.deptId === this.$store.getters.currentUser.deptId)\n        }\n      } catch (error) {\n        this.$message.error('获取数据失败')\n      }\n    },\n    getStatusType(status) {\n      const types = {\n        0: 'info',\n        1: 'warning',\n        2: 'success'\n      }\n      return types[status] || 'info'\n    },\n    getStatusText(status) {\n      const texts = {\n        0: '待处理',\n        1: '进行中',\n        2: '已完成'\n      }\n      return texts[status] || '未知'\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.dashboard {\n  padding: 20px;\n}\n\n.box-card {\n  margin-bottom: 20px;\n}\n\n.message-item, .task-item {\n  padding: 10px 0;\n  border-bottom: 1px solid #eee;\n  \n  &:last-child {\n    border-bottom: none;\n  }\n  \n  .title {\n    margin: 0 0 5px;\n    font-size: 14px;\n  }\n  \n  .meta {\n    margin: 0;\n    font-size: 12px;\n    color: #999;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n}\n\n.empty-text {\n  text-align: center;\n  color: #999;\n  padding: 20px 0;\n}\n</style> "],"mappings":"AA+DA,OAAAA,GAAA;AACA,SAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,cAAA;MACAC,UAAA;MACAC,UAAA;MACAC,eAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,OAAA;IACAT,UAAA;IACA,MAAAQ,UAAA;MACA;QACA,OAAAE,QAAA,EAAAC,KAAA,UAAAC,OAAA,CAAAC,GAAA,EACAd,GAAA,CAAAe,WAAA,IACAf,GAAA,CAAAgB,QAAA,GACA;QAEA,KAAAZ,cAAA,GAAAO,QAAA,CAAAM,MAAA,CAAAC,GAAA,KAAAA,GAAA,CAAAC,MAAA,EAAAC,KAAA;QACA,KAAAf,UAAA,GAAAO,KAAA,CAAAK,MAAA,CAAAI,IAAA;UACA,MAAAC,KAAA,OAAAC,IAAA,GAAAC,WAAA,GAAAC,KAAA;UACA,OAAAJ,IAAA,CAAAK,OAAA,CAAAC,UAAA,CAAAL,KAAA;QACA,GAAAF,KAAA;QAEA,SAAAQ,MAAA,CAAAC,OAAA,CAAAC,WAAA,CAAAC,MAAA;UACA,OAAAC,IAAA,EAAAC,KAAA,UAAApB,OAAA,CAAAC,GAAA,EACAd,GAAA,CAAAkC,cAAA,IACAlC,GAAA,CAAAmC,QAAA,GACA;UACA,KAAA7B,UAAA,GAAA0B,IAAA,CAAAI,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAN,MAAA,UAAAH,MAAA,CAAAC,OAAA,CAAAC,WAAA,CAAAC,MAAA;UACA,KAAAxB,eAAA,GAAA0B,KAAA,CAAAhB,MAAA,CAAAqB,CAAA,IAAAA,CAAA,CAAAP,MAAA,UAAAH,MAAA,CAAAC,OAAA,CAAAC,WAAA,CAAAC,MAAA;QACA;MACA,SAAAQ,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACAE,cAAAC,MAAA;MACA,MAAAC,KAAA;QACA;QACA;QACA;MACA;MACA,OAAAA,KAAA,CAAAD,MAAA;IACA;IACAE,cAAAF,MAAA;MACA,MAAAG,KAAA;QACA;QACA;QACA;MACA;MACA,OAAAA,KAAA,CAAAH,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}