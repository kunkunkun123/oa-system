{"ast":null,"code":"import axios from 'axios';\nimport store from '../store';\nimport router from '../router';\nimport { Message } from 'element-ui';\nimport request from '@/utils/request';\n\n// 创建 axios 实例\nconst api = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API || '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 5000\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  const token = store.state.token;\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  // 添加调试日志\n  console.log('Request config:', config);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => response.data, error => {\n  console.error('API Error:', error);\n  if (error.code === 'ECONNABORTED') {\n    console.error('请求超时');\n    Message.error('请求超时，请重试');\n  } else if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        store.dispatch('logout');\n        router.push('/login');\n        Message.error('登录已过期，请重新登录');\n        break;\n      case 403:\n        Message.error('没有权限执行此操作');\n        break;\n      default:\n        Message.error(error.response.data?.message || '服务器错误');\n    }\n  } else if (error.request) {\n    console.error('请求未收到响应');\n    Message.error('网络连接失败，请检查网络');\n  } else {\n    Message.error('请求发送失败');\n  }\n  return Promise.reject(error);\n});\nexport default {\n  // 用户相关\n  login: data => request.post('/auth/login', data),\n  register: data => {\n    // 转换 realName 为 name\n    const convertedData = {\n      ...data,\n      name: data.realName\n    };\n    delete convertedData.realName;\n    console.log('API register 方法接收到的数据:', convertedData);\n    return api.post('/users/register', convertedData);\n  },\n  updatePassword: data => api.put('/users/password', data),\n  getUsers: () => api.get('/users'),\n  updateUser: (userId, data) => {\n    console.log('更新用户数据:', {\n      userId,\n      data\n    });\n    return api.put(`/users/${userId}`, data);\n  },\n  resetPassword: userId => api.post(`/users/${userId}/reset-password`),\n  updateUserStatus: (userId, status) => api.put(`/users/${userId}/status`, {\n    status\n  }),\n  deleteUser: userId => api.delete(`/users/${userId}`),\n  // 消息相关\n  getMessages: () => api.get('/messages/my'),\n  getSentMessages: () => api.get('/messages/sent'),\n  sendMessage: data => api.post('/messages', data),\n  sendDepartmentMessage: (deptId, data) => api.post(`/messages/department/${deptId}`, data),\n  markMessageAsRead: messageId => {\n    if (!messageId) {\n      return Promise.reject(new Error('消息ID不能为空'));\n    }\n    return api.put(`/messages/${messageId}/read`);\n  },\n  // 任务相关\n  getTasks: () => {\n    console.log('开始获取任务列表');\n    return api.get('/tasks').then(response => {\n      console.log('获取任务列表响应:', response);\n      return response;\n    });\n  },\n  getMyTasks: () => {\n    console.log('获取我的任务列表');\n    return api.get('/tasks/my');\n  },\n  getDepartmentTasks: deptId => api.get(`/tasks/department/${deptId}`),\n  createTask: data => {\n    console.log('创建任务请求数据:', data);\n    return api.post('/tasks', data).then(response => {\n      console.log('创建任务响应:', response);\n      return response;\n    });\n  },\n  updateTaskStatus: (taskId, status) => api.put(`/tasks/${taskId}/status`, status, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }),\n  // 部门相关\n  getDepartments: () => api.get('/departments'),\n  createDepartment: data => api.post('/departments', data),\n  updateDepartment: (deptId, data) => api.put(`/departments/${deptId}`, data),\n  deleteDepartment: deptId => api.delete(`/departments/${deptId}`),\n  assignManager: (deptId, managerId) => api.put(`/departments/${deptId}/manager/${managerId}`),\n  // 公告相关\n  getAnnouncements: (all = false) => api.get(`/announcements${all ? '?all=true' : ''}`),\n  createAnnouncement: data => api.post('/announcements', data),\n  updateAnnouncementStatus: (id, status) => api.put(`/announcements/${id}/status`, status),\n  // 获取月度任务统计\n  getMonthlyTaskStats() {\n    return api.get('/tasks/monthly-stats');\n  }\n};","map":{"version":3,"names":["axios","store","router","Message","request","api","create","baseURL","process","env","VUE_APP_BASE_API","headers","timeout","interceptors","use","config","token","state","console","log","error","Promise","reject","response","data","code","status","dispatch","push","message","login","post","register","convertedData","name","realName","updatePassword","put","getUsers","get","updateUser","userId","resetPassword","updateUserStatus","deleteUser","delete","getMessages","getSentMessages","sendMessage","sendDepartmentMessage","deptId","markMessageAsRead","messageId","Error","getTasks","then","getMyTasks","getDepartmentTasks","createTask","updateTaskStatus","taskId","getDepartments","createDepartment","updateDepartment","deleteDepartment","assignManager","managerId","getAnnouncements","all","createAnnouncement","updateAnnouncementStatus","id","getMonthlyTaskStats"],"sources":["D:/oasystem/src/main/resources/static/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios'\nimport store from '../store'\nimport router from '../router'\nimport { Message } from 'element-ui'\nimport request from '@/utils/request'\n\n// 创建 axios 实例\nconst api = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API || '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 5000\n})\n\n// 请求拦截器\napi.interceptors.request.use(\n  config => {\n    const token = store.state.token\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`\n    }\n    // 添加调试日志\n    console.log('Request config:', config)\n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\napi.interceptors.response.use(\n  response => response.data,\n  error => {\n    console.error('API Error:', error)\n    if (error.code === 'ECONNABORTED') {\n      console.error('请求超时')\n      Message.error('请求超时，请重试')\n    } else if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          store.dispatch('logout')\n          router.push('/login')\n          Message.error('登录已过期，请重新登录')\n          break\n        case 403:\n          Message.error('没有权限执行此操作')\n          break\n        default:\n          Message.error(error.response.data?.message || '服务器错误')\n      }\n    } else if (error.request) {\n      console.error('请求未收到响应')\n      Message.error('网络连接失败，请检查网络')\n    } else {\n      Message.error('请求发送失败')\n    }\n    return Promise.reject(error)\n  }\n)\n\nexport default {\n  // 用户相关\n  login: (data) => request.post('/auth/login', data),\n  register: data => {\n    // 转换 realName 为 name\n    const convertedData = {\n      ...data,\n      name: data.realName\n    };\n    delete convertedData.realName;\n    \n    console.log('API register 方法接收到的数据:', convertedData)\n    return api.post('/users/register', convertedData)\n  },\n  updatePassword: data => api.put('/users/password', data),\n  getUsers: () => api.get('/users'),\n  updateUser: (userId, data) => {\n    console.log('更新用户数据:', { userId, data })\n    return api.put(`/users/${userId}`, data)\n  },\n  resetPassword: userId => api.post(`/users/${userId}/reset-password`),\n  updateUserStatus: (userId, status) => api.put(`/users/${userId}/status`, { status }),\n  deleteUser: userId => api.delete(`/users/${userId}`),\n  \n  // 消息相关\n  getMessages: () => api.get('/messages/my'),\n  getSentMessages: () => api.get('/messages/sent'),\n  sendMessage: data => api.post('/messages', data),\n  sendDepartmentMessage: (deptId, data) => api.post(`/messages/department/${deptId}`, data),\n  markMessageAsRead: messageId => {\n    if (!messageId) {\n      return Promise.reject(new Error('消息ID不能为空'))\n    }\n    return api.put(`/messages/${messageId}/read`)\n  },\n  \n  // 任务相关\n  getTasks: () => {\n    console.log('开始获取任务列表')\n    return api.get('/tasks').then(response => {\n      console.log('获取任务列表响应:', response)\n      return response\n    })\n  },\n  getMyTasks: () => {\n    console.log('获取我的任务列表')\n    return api.get('/tasks/my')\n  },\n  getDepartmentTasks: deptId => api.get(`/tasks/department/${deptId}`),\n  createTask: data => {\n    console.log('创建任务请求数据:', data)\n    return api.post('/tasks', data).then(response => {\n      console.log('创建任务响应:', response)\n      return response\n    })\n  },\n  updateTaskStatus: (taskId, status) => \n    api.put(`/tasks/${taskId}/status`, status, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }),\n  \n  // 部门相关\n  getDepartments: () => api.get('/departments'),\n  createDepartment: data => api.post('/departments', data),\n  updateDepartment: (deptId, data) => api.put(`/departments/${deptId}`, data),\n  deleteDepartment: deptId => api.delete(`/departments/${deptId}`),\n  assignManager: (deptId, managerId) => api.put(`/departments/${deptId}/manager/${managerId}`),\n  \n  // 公告相关\n  getAnnouncements: (all = false) => api.get(`/announcements${all ? '?all=true' : ''}`),\n  createAnnouncement: (data) => api.post('/announcements', data),\n  updateAnnouncementStatus: (id, status) => api.put(`/announcements/${id}/status`, status),\n  \n  // 获取月度任务统计\n  getMonthlyTaskStats() {\n    return api.get('/tasks/monthly-stats')\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}