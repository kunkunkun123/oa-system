{"ast":null,"code":"import api from '../api';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'Tasks',\n  data() {\n    return {\n      activeTab: 'my',\n      loading: false,\n      submitting: false,\n      dialogVisible: false,\n      viewDialogVisible: false,\n      myTasks: [],\n      createdTasks: [],\n      currentTask: null,\n      users: [],\n      departments: [],\n      taskForm: {\n        assigneeId: '',\n        title: '',\n        content: '',\n        dueDate: ''\n      },\n      rules: {\n        assigneeId: [{\n          required: true,\n          message: '请选择执行人',\n          trigger: 'change'\n        }],\n        title: [{\n          required: true,\n          message: '请输入标题',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '请输入内容',\n          trigger: 'blur'\n        }],\n        dueDate: [{\n          required: true,\n          message: '请选择截止日期',\n          trigger: 'change'\n        }]\n      }\n    };\n  },\n  computed: {\n    ...mapGetters(['currentUser']),\n    canCreateTask() {\n      return this.currentUser.roleId <= 3; // 总经理、部门经理可以创建任务\n    },\n    availableUsers() {\n      if (this.currentUser.roleId === 1 || this.currentUser.roleId === 2) {\n        // 总经理可以给所有人分配任务\n        return this.users.filter(u => u.userId !== this.currentUser.userId);\n      } else if (this.currentUser.roleId === 3) {\n        // 部门经理只能给本部门员工分配任务\n        return this.users.filter(u => u.userId !== this.currentUser.userId && u.deptId === this.currentUser.deptId);\n      }\n      return [];\n    },\n    dialogTitle() {\n      return '创建任务';\n    }\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      this.loading = true;\n      try {\n        const [myTasks, createdTasks, users] = await Promise.all([api.getMyTasks(), api.getTasks(), api.getUsers()]);\n        console.log('我的任务:', myTasks);\n        console.log('创建的任务:', createdTasks);\n        this.myTasks = myTasks;\n        this.createdTasks = createdTasks.filter(t => t.creatorId === this.currentUser.userId);\n        this.users = users;\n      } catch (error) {\n        console.error('获取数据失败:', error);\n        this.$message.error('获取数据失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    getStatusType(status) {\n      const types = {\n        0: 'info',\n        1: 'warning',\n        2: 'success'\n      };\n      return types[status] || 'info';\n    },\n    getStatusText(status) {\n      const texts = {\n        0: '待处理',\n        1: '进行中',\n        2: '已完成'\n      };\n      return texts[status] || '未知';\n    },\n    showCreateDialog() {\n      this.dialogVisible = true;\n      this.taskForm = {\n        assigneeId: '',\n        title: '',\n        content: '',\n        dueDate: ''\n      };\n    },\n    disabledDate(time) {\n      return time.getTime() < Date.now() - 8.64e7; // 不能选择今天之前的日期\n    },\n    async submitTask() {\n      this.$refs.taskForm.validate(async valid => {\n        if (valid) {\n          this.submitting = true;\n          try {\n            await api.createTask({\n              ...this.taskForm,\n              dueDate: this.taskForm.dueDate.toISOString().split('T')[0],\n              deptId: this.currentUser.roleId === 3 ? this.currentUser.deptId : null\n            });\n            this.$message.success('创建成功');\n            this.dialogVisible = false;\n            this.fetchData();\n          } catch (error) {\n            this.$message.error('创建失败');\n          } finally {\n            this.submitting = false;\n          }\n        }\n      });\n    },\n    viewTask(task) {\n      this.currentTask = task;\n      this.viewDialogVisible = true;\n    },\n    async updateStatus(task) {\n      try {\n        const newStatus = task.status === 0 ? 1 : 2;\n        await api.updateTaskStatus(task.taskId, {\n          status: newStatus\n        });\n        task.status = newStatus;\n        this.$message.success('更新成功');\n      } catch (error) {\n        console.error('更新失败:', error);\n        this.$message.error('更新失败');\n      }\n    },\n    getDepartmentName(deptId) {\n      const dept = this.departments.find(d => d.deptId === deptId);\n      return dept ? dept.deptName : '未分配';\n    }\n  }\n};","map":{"version":3,"names":["api","mapGetters","name","data","activeTab","loading","submitting","dialogVisible","viewDialogVisible","myTasks","createdTasks","currentTask","users","departments","taskForm","assigneeId","title","content","dueDate","rules","required","message","trigger","computed","canCreateTask","currentUser","roleId","availableUsers","filter","u","userId","deptId","dialogTitle","created","fetchData","methods","Promise","all","getMyTasks","getTasks","getUsers","console","log","t","creatorId","error","$message","getStatusType","status","types","getStatusText","texts","showCreateDialog","disabledDate","time","getTime","Date","now","submitTask","$refs","validate","valid","createTask","toISOString","split","success","viewTask","task","updateStatus","newStatus","updateTaskStatus","taskId","getDepartmentName","dept","find","d","deptName"],"sources":["src/views/Tasks.vue"],"sourcesContent":["<template>\n  <div class=\"page-container\">\n    <div class=\"page-header\">\n      <div class=\"title\">任务管理</div>\n      <el-button type=\"primary\" @click=\"showCreateDialog\" v-if=\"canCreateTask\">创建任务</el-button>\n    </div>\n    \n    <el-tabs v-model=\"activeTab\">\n      <el-tab-pane label=\"我的任务\" name=\"my\">\n        <el-table :data=\"myTasks\" v-loading=\"loading\">\n          <el-table-column prop=\"title\" label=\"标题\" />\n          <el-table-column prop=\"creator.name\" label=\"创建人\" width=\"120\" />\n          <el-table-column prop=\"dueDate\" label=\"截止日期\" width=\"120\" />\n          <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\n            <template slot-scope=\"scope\">\n              <el-tag :type=\"getStatusType(scope.row.status)\">\n                {{ getStatusText(scope.row.status) }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"180\">\n            <template slot-scope=\"scope\">\n              <el-button type=\"text\" @click=\"viewTask(scope.row)\">查看</el-button>\n              <el-button \n                type=\"text\" \n                @click=\"updateStatus(scope.row)\"\n                v-if=\"scope.row.status !== 2\">\n                {{ scope.row.status === 0 ? '开始' : '完成' }}\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-tab-pane>\n      \n      <el-tab-pane label=\"已创建\" name=\"created\" v-if=\"canCreateTask\">\n        <el-table :data=\"createdTasks\" v-loading=\"loading\">\n          <el-table-column prop=\"title\" label=\"标题\" />\n          <el-table-column prop=\"assignee.name\" label=\"执行人\" width=\"120\" />\n          <el-table-column prop=\"dueDate\" label=\"截止日期\" width=\"120\" />\n          <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\n            <template slot-scope=\"scope\">\n              <el-tag :type=\"getStatusType(scope.row.status)\">\n                {{ getStatusText(scope.row.status) }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"120\">\n            <template slot-scope=\"scope\">\n              <el-button type=\"text\" @click=\"viewTask(scope.row)\">查看</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-tab-pane>\n    </el-tabs>\n    \n    <!-- 创建任务对话框 -->\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\" width=\"500px\">\n      <el-form :model=\"taskForm\" :rules=\"rules\" ref=\"taskForm\" label-width=\"80px\">\n        <el-form-item label=\"执行人\" prop=\"assigneeId\">\n          <el-select v-model=\"taskForm.assigneeId\" placeholder=\"请选择执行人\">\n            <el-option\n              v-for=\"user in availableUsers\"\n              :key=\"user.userId\"\n              :label=\"user.name\"\n              :value=\"user.userId\">\n              <span>{{ user.name }}</span>\n              <span style=\"float: right; color: #8492a6; font-size: 13px\">\n                {{ getDepartmentName(user.deptId) }}\n              </span>\n            </el-option>\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"标题\" prop=\"title\">\n          <el-input v-model=\"taskForm.title\"></el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"内容\" prop=\"content\">\n          <el-input type=\"textarea\" v-model=\"taskForm.content\" rows=\"4\"></el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"截止日期\" prop=\"dueDate\">\n          <el-date-picker\n            v-model=\"taskForm.dueDate\"\n            type=\"date\"\n            placeholder=\"选择日期\"\n            :picker-options=\"{ disabledDate: disabledDate }\">\n          </el-date-picker>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"submitTask\" :loading=\"submitting\">确定</el-button>\n      </div>\n    </el-dialog>\n    \n    <!-- 查看任务对话框 -->\n    <el-dialog title=\"任务详情\" :visible.sync=\"viewDialogVisible\" width=\"500px\">\n      <div v-if=\"currentTask\">\n        <h3>{{ currentTask.title }}</h3>\n        <p class=\"task-meta\">\n          <span>创建人：{{ currentTask.creator.name }}</span>\n          <span>执行人：{{ currentTask.assignee.name }}</span>\n        </p>\n        <p class=\"task-meta\">\n          <span>截止日期：{{ currentTask.dueDate }}</span>\n          <span>状态：\n            <el-tag :type=\"getStatusType(currentTask.status)\">\n              {{ getStatusText(currentTask.status) }}\n            </el-tag>\n          </span>\n        </p>\n        <div class=\"task-content\">{{ currentTask.content }}</div>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport api from '../api'\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'Tasks',\n  data() {\n    return {\n      activeTab: 'my',\n      loading: false,\n      submitting: false,\n      dialogVisible: false,\n      viewDialogVisible: false,\n      myTasks: [],\n      createdTasks: [],\n      currentTask: null,\n      users: [],\n      departments: [],\n      taskForm: {\n        assigneeId: '',\n        title: '',\n        content: '',\n        dueDate: ''\n      },\n      rules: {\n        assigneeId: [\n          { required: true, message: '请选择执行人', trigger: 'change' }\n        ],\n        title: [\n          { required: true, message: '请输入标题', trigger: 'blur' }\n        ],\n        content: [\n          { required: true, message: '请输入内容', trigger: 'blur' }\n        ],\n        dueDate: [\n          { required: true, message: '请选择截止日期', trigger: 'change' }\n        ]\n      }\n    }\n  },\n  computed: {\n    ...mapGetters(['currentUser']),\n    canCreateTask() {\n      return this.currentUser.roleId <= 3 // 总经理、部门经理可以创建任务\n    },\n    availableUsers() {\n      if (this.currentUser.roleId === 1 || this.currentUser.roleId === 2) {\n        // 总经理可以给所有人分配任务\n        return this.users.filter(u => u.userId !== this.currentUser.userId)\n      } else if (this.currentUser.roleId === 3) {\n        // 部门经理只能给本部门员工分配任务\n        return this.users.filter(u => \n          u.userId !== this.currentUser.userId && \n          u.deptId === this.currentUser.deptId\n        )\n      }\n      return []\n    },\n    dialogTitle() {\n      return '创建任务'\n    }\n  },\n  created() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      this.loading = true\n      try {\n        const [myTasks, createdTasks, users] = await Promise.all([\n          api.getMyTasks(),\n          api.getTasks(),\n          api.getUsers()\n        ])\n        console.log('我的任务:', myTasks)\n        console.log('创建的任务:', createdTasks)\n        this.myTasks = myTasks\n        this.createdTasks = createdTasks.filter(t => t.creatorId === this.currentUser.userId)\n        this.users = users\n      } catch (error) {\n        console.error('获取数据失败:', error)\n        this.$message.error('获取数据失败')\n      } finally {\n        this.loading = false\n      }\n    },\n    getStatusType(status) {\n      const types = {\n        0: 'info',\n        1: 'warning',\n        2: 'success'\n      }\n      return types[status] || 'info'\n    },\n    getStatusText(status) {\n      const texts = {\n        0: '待处理',\n        1: '进行中',\n        2: '已完成'\n      }\n      return texts[status] || '未知'\n    },\n    showCreateDialog() {\n      this.dialogVisible = true\n      this.taskForm = {\n        assigneeId: '',\n        title: '',\n        content: '',\n        dueDate: ''\n      }\n    },\n    disabledDate(time) {\n      return time.getTime() < Date.now() - 8.64e7 // 不能选择今天之前的日期\n    },\n    async submitTask() {\n      this.$refs.taskForm.validate(async valid => {\n        if (valid) {\n          this.submitting = true\n          try {\n            await api.createTask({\n              ...this.taskForm,\n              dueDate: this.taskForm.dueDate.toISOString().split('T')[0],\n              deptId: this.currentUser.roleId === 3 ? this.currentUser.deptId : null\n            })\n            this.$message.success('创建成功')\n            this.dialogVisible = false\n            this.fetchData()\n          } catch (error) {\n            this.$message.error('创建失败')\n          } finally {\n            this.submitting = false\n          }\n        }\n      })\n    },\n    viewTask(task) {\n      this.currentTask = task\n      this.viewDialogVisible = true\n    },\n    async updateStatus(task) {\n      try {\n        const newStatus = task.status === 0 ? 1 : 2;\n        await api.updateTaskStatus(task.taskId, { status: newStatus });\n        task.status = newStatus;\n        this.$message.success('更新成功');\n      } catch (error) {\n        console.error('更新失败:', error);\n        this.$message.error('更新失败');\n      }\n    },\n    getDepartmentName(deptId) {\n      const dept = this.departments.find(d => d.deptId === deptId)\n      return dept ? dept.deptName : '未分配'\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.task-meta {\n  color: #666;\n  font-size: 14px;\n  margin: 10px 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.task-content {\n  margin-top: 20px;\n  white-space: pre-wrap;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}