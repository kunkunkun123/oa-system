{"ast":null,"code":"import api from '../api';\nimport { formatDate } from '../utils/date';\nexport default {\n  name: 'Announcements',\n  data() {\n    return {\n      loading: false,\n      announcements: [],\n      dialogVisible: false,\n      submitting: false,\n      form: {\n        title: '',\n        content: ''\n      },\n      rules: {\n        title: [{\n          required: true,\n          message: '请输入公告标题',\n          trigger: 'blur'\n        }, {\n          max: 100,\n          message: '标题最多100个字符',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '请输入公告内容',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: {\n    dialogTitle() {\n      return '发布公告';\n    }\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    formatDate,\n    async fetchData() {\n      try {\n        this.loading = true;\n        const response = await api.getAnnouncements();\n        this.announcements = response;\n      } catch (error) {\n        console.error('获取公告列表失败:', error);\n        this.$message.error('获取公告列表失败');\n      } finally {\n        this.loading = false;\n      }\n    },\n    showCreateDialog() {\n      this.form = {\n        title: '',\n        content: ''\n      };\n      this.dialogVisible = true;\n    },\n    submitForm() {\n      this.$refs.form.validate(async valid => {\n        if (!valid) return;\n        this.submitting = true;\n        try {\n          await api.createAnnouncement(this.form);\n          this.$message.success('发布成功');\n          this.dialogVisible = false;\n          this.fetchData();\n        } catch (error) {\n          console.error('发布失败:', error);\n          this.$message.error('发布失败');\n        } finally {\n          this.submitting = false;\n        }\n      });\n    },\n    async updateStatus(announcement) {\n      try {\n        const newStatus = announcement.status === 1 ? 0 : 1;\n        await api.updateAnnouncementStatus(announcement.announcementId, newStatus);\n        announcement.status = newStatus;\n        this.$message.success(newStatus === 1 ? '已发布' : '已下线');\n      } catch (error) {\n        console.error('更新状态失败:', error);\n        this.$message.error('操作失败');\n      }\n    },\n    async handleDelete(announcement) {\n      try {\n        await this.$confirm('确认删除该公告吗？', '提示', {\n          type: 'warning'\n        });\n        this.loading = true;\n        await api.deleteAnnouncement(announcement.announcementId);\n\n        // 删除成功后重新获取列表\n        await this.fetchData();\n        this.$message.success('删除成功');\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error('删除失败:', error);\n          this.$message.error(error.response?.data?.message || '删除失败');\n        }\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","formatDate","name","data","loading","announcements","dialogVisible","submitting","form","title","content","rules","required","message","trigger","max","computed","dialogTitle","created","fetchData","methods","response","getAnnouncements","error","console","$message","showCreateDialog","submitForm","$refs","validate","valid","createAnnouncement","success","updateStatus","announcement","newStatus","status","updateAnnouncementStatus","announcementId","handleDelete","$confirm","type","deleteAnnouncement"],"sources":["src/views/Announcements.vue"],"sourcesContent":["<template>\n  <div class=\"page-container\">\n    <div class=\"page-header\">\n      <div class=\"title\">\n        <i class=\"el-icon-bell\"></i> 公告管理\n      </div>\n      <el-button type=\"primary\" @click=\"showCreateDialog\">\n        <i class=\"el-icon-plus\"></i> 发布公告\n      </el-button>\n    </div>\n\n    <el-table :data=\"announcements\" v-loading=\"loading\">\n      <el-table-column label=\"标题\" prop=\"title\" />\n      <el-table-column label=\"内容\" prop=\"content\" show-overflow-tooltip />\n      <el-table-column label=\"发布时间\" width=\"160\">\n        <template slot-scope=\"scope\">\n          {{ formatDate(scope.row.createTime) }}\n        </template>\n      </el-table-column>\n      <el-table-column label=\"状态\" width=\"100\">\n        <template slot-scope=\"scope\">\n          <el-tag :type=\"scope.row.status === 1 ? 'success' : 'info'\">\n            {{ scope.row.status === 1 ? '已发布' : '已下线' }}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column label=\"操作\" width=\"150\">\n        <template slot-scope=\"scope\">\n          <el-button \n            type=\"text\" \n            @click=\"updateStatus(scope.row)\"\n            :disabled=\"loading\">\n            {{ scope.row.status === 1 ? '下线' : '发布' }}\n          </el-button>\n          <el-button \n            type=\"text\" \n            class=\"delete-btn\" \n            @click=\"handleDelete(scope.row)\"\n            :disabled=\"loading\">\n            删除\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 创建/编辑公告对话框 -->\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\" width=\"500px\">\n      <el-form :model=\"form\" :rules=\"rules\" ref=\"form\" label-width=\"80px\">\n        <el-form-item label=\"标题\" prop=\"title\">\n          <el-input v-model=\"form.title\" placeholder=\"请输入公告标题\" />\n        </el-form-item>\n        <el-form-item label=\"内容\" prop=\"content\">\n          <el-input \n            type=\"textarea\" \n            v-model=\"form.content\" \n            placeholder=\"请输入公告内容\"\n            :rows=\"4\" />\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\">\n        <el-button @click=\"dialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"submitForm\" :loading=\"submitting\">\n          确定\n        </el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport api from '../api'\nimport { formatDate } from '../utils/date'\n\nexport default {\n  name: 'Announcements',\n  data() {\n    return {\n      loading: false,\n      announcements: [],\n      dialogVisible: false,\n      submitting: false,\n      form: {\n        title: '',\n        content: ''\n      },\n      rules: {\n        title: [\n          { required: true, message: '请输入公告标题', trigger: 'blur' },\n          { max: 100, message: '标题最多100个字符', trigger: 'blur' }\n        ],\n        content: [\n          { required: true, message: '请输入公告内容', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    dialogTitle() {\n      return '发布公告'\n    }\n  },\n  created() {\n    this.fetchData()\n  },\n  methods: {\n    formatDate,\n    async fetchData() {\n      try {\n        this.loading = true\n        const response = await api.getAnnouncements()\n        this.announcements = response\n      } catch (error) {\n        console.error('获取公告列表失败:', error)\n        this.$message.error('获取公告列表失败')\n      } finally {\n        this.loading = false\n      }\n    },\n    showCreateDialog() {\n      this.form = {\n        title: '',\n        content: ''\n      }\n      this.dialogVisible = true\n    },\n    submitForm() {\n      this.$refs.form.validate(async valid => {\n        if (!valid) return\n        \n        this.submitting = true\n        try {\n          await api.createAnnouncement(this.form)\n          this.$message.success('发布成功')\n          this.dialogVisible = false\n          this.fetchData()\n        } catch (error) {\n          console.error('发布失败:', error)\n          this.$message.error('发布失败')\n        } finally {\n          this.submitting = false\n        }\n      })\n    },\n    async updateStatus(announcement) {\n      try {\n        const newStatus = announcement.status === 1 ? 0 : 1\n        await api.updateAnnouncementStatus(announcement.announcementId, newStatus)\n        announcement.status = newStatus\n        this.$message.success(newStatus === 1 ? '已发布' : '已下线')\n      } catch (error) {\n        console.error('更新状态失败:', error)\n        this.$message.error('操作失败')\n      }\n    },\n    async handleDelete(announcement) {\n      try {\n        await this.$confirm('确认删除该公告吗？', '提示', {\n          type: 'warning'\n        })\n        \n        this.loading = true\n        await api.deleteAnnouncement(announcement.announcementId)\n        \n        // 删除成功后重新获取列表\n        await this.fetchData()\n        \n        this.$message.success('删除成功')\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error('删除失败:', error)\n          this.$message.error(error.response?.data?.message || '删除失败')\n        }\n      } finally {\n        this.loading = false\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.page-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  \n  .title {\n    font-size: 18px;\n    font-weight: 500;\n    display: flex;\n    align-items: center;\n    \n    i {\n      margin-right: 8px;\n    }\n  }\n}\n\n.delete-btn {\n  color: #f56c6c;\n  margin-left: 10px;\n  \n  &:hover {\n    color: #f78989;\n  }\n}\n</style> "],"mappings":"AAsEA,OAAAA,GAAA;AACA,SAAAC,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,aAAA;MACAC,aAAA;MACAC,UAAA;MACAC,IAAA;QACAC,KAAA;QACAC,OAAA;MACA;MACAC,KAAA;QACAF,KAAA,GACA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA,EACA;QACAJ,OAAA,GACA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MAEA;IACA;EACA;EACAE,QAAA;IACAC,YAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,OAAA;IACAnB,UAAA;IACA,MAAAkB,UAAA;MACA;QACA,KAAAf,OAAA;QACA,MAAAiB,QAAA,SAAArB,GAAA,CAAAsB,gBAAA;QACA,KAAAjB,aAAA,GAAAgB,QAAA;MACA,SAAAE,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;QACA,KAAAnB,OAAA;MACA;IACA;IACAsB,iBAAA;MACA,KAAAlB,IAAA;QACAC,KAAA;QACAC,OAAA;MACA;MACA,KAAAJ,aAAA;IACA;IACAqB,WAAA;MACA,KAAAC,KAAA,CAAApB,IAAA,CAAAqB,QAAA,OAAAC,KAAA;QACA,KAAAA,KAAA;QAEA,KAAAvB,UAAA;QACA;UACA,MAAAP,GAAA,CAAA+B,kBAAA,MAAAvB,IAAA;UACA,KAAAiB,QAAA,CAAAO,OAAA;UACA,KAAA1B,aAAA;UACA,KAAAa,SAAA;QACA,SAAAI,KAAA;UACAC,OAAA,CAAAD,KAAA,UAAAA,KAAA;UACA,KAAAE,QAAA,CAAAF,KAAA;QACA;UACA,KAAAhB,UAAA;QACA;MACA;IACA;IACA,MAAA0B,aAAAC,YAAA;MACA;QACA,MAAAC,SAAA,GAAAD,YAAA,CAAAE,MAAA;QACA,MAAApC,GAAA,CAAAqC,wBAAA,CAAAH,YAAA,CAAAI,cAAA,EAAAH,SAAA;QACAD,YAAA,CAAAE,MAAA,GAAAD,SAAA;QACA,KAAAV,QAAA,CAAAO,OAAA,CAAAG,SAAA;MACA,SAAAZ,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;IACA,MAAAgB,aAAAL,YAAA;MACA;QACA,WAAAM,QAAA;UACAC,IAAA;QACA;QAEA,KAAArC,OAAA;QACA,MAAAJ,GAAA,CAAA0C,kBAAA,CAAAR,YAAA,CAAAI,cAAA;;QAEA;QACA,WAAAnB,SAAA;QAEA,KAAAM,QAAA,CAAAO,OAAA;MACA,SAAAT,KAAA;QACA,IAAAA,KAAA;UACAC,OAAA,CAAAD,KAAA,UAAAA,KAAA;UACA,KAAAE,QAAA,CAAAF,KAAA,CAAAA,KAAA,CAAAF,QAAA,EAAAlB,IAAA,EAAAU,OAAA;QACA;MACA;QACA,KAAAT,OAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}