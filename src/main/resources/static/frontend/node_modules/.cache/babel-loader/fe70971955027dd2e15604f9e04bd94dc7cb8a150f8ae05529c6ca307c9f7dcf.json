{"ast":null,"code":"import axios from 'axios';\nimport store from '../store';\nimport router from '../router';\nimport { Message } from 'element-ui';\nimport request from '@/utils/request';\n\n// 创建 axios 实例\nconst api = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API || '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 5000\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  const token = store.state.token;\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  // 添加调试日志\n  console.log('Request config:', config);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => response.data, error => {\n  console.error('API Error:', error);\n  if (error.code === 'ECONNABORTED') {\n    console.error('请求超时');\n    Message.error('请求超时，请重试');\n  } else if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        store.dispatch('logout');\n        router.push('/login');\n        Message.error('登录已过期，请重新登录');\n        break;\n      case 403:\n        Message.error('没有权限执行此操作');\n        break;\n      default:\n        Message.error(error.response.data?.message || '服务器错误');\n    }\n  } else if (error.request) {\n    console.error('请求未收到响应');\n    Message.error('网络连接失败，请检查网络');\n  } else {\n    Message.error('请求发送失败');\n  }\n  return Promise.reject(error);\n});\n\n// 任务相关 API\nconst task = {\n  getMyTasks: () => request.get('/tasks/my')\n  // ... 其他任务相关接口\n};\n\n// 消息相关 API\nconst message = {\n  getMessages: () => request.get('/messages')\n  // ... 其他消息相关接口\n};\nexport default {\n  // 用户相关\n  login: data => request.post('/auth/login', data),\n  register: data => request.post('/auth/register', data),\n  // 导出模块\n  task,\n  message\n};","map":{"version":3,"names":["axios","store","router","Message","request","api","create","baseURL","process","env","VUE_APP_BASE_API","headers","timeout","interceptors","use","config","token","state","console","log","error","Promise","reject","response","data","code","status","dispatch","push","message","task","getMyTasks","get","getMessages","login","post","register"],"sources":["D:/oasystem/src/main/resources/static/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios'\nimport store from '../store'\nimport router from '../router'\nimport { Message } from 'element-ui'\nimport request from '@/utils/request'\n\n// 创建 axios 实例\nconst api = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API || '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 5000\n})\n\n// 请求拦截器\napi.interceptors.request.use(\n  config => {\n    const token = store.state.token\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`\n    }\n    // 添加调试日志\n    console.log('Request config:', config)\n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\napi.interceptors.response.use(\n  response => response.data,\n  error => {\n    console.error('API Error:', error)\n    if (error.code === 'ECONNABORTED') {\n      console.error('请求超时')\n      Message.error('请求超时，请重试')\n    } else if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          store.dispatch('logout')\n          router.push('/login')\n          Message.error('登录已过期，请重新登录')\n          break\n        case 403:\n          Message.error('没有权限执行此操作')\n          break\n        default:\n          Message.error(error.response.data?.message || '服务器错误')\n      }\n    } else if (error.request) {\n      console.error('请求未收到响应')\n      Message.error('网络连接失败，请检查网络')\n    } else {\n      Message.error('请求发送失败')\n    }\n    return Promise.reject(error)\n  }\n)\n\n// 任务相关 API\nconst task = {\n  getMyTasks: () => request.get('/tasks/my'),\n  // ... 其他任务相关接口\n}\n\n// 消息相关 API\nconst message = {\n  getMessages: () => request.get('/messages'),\n  // ... 其他消息相关接口\n}\n\nexport default {\n  // 用户相关\n  login: (data) => request.post('/auth/login', data),\n  register: (data) => request.post('/auth/register', data),\n  \n  // 导出模块\n  task,\n  message\n} "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAOC,OAAO,MAAM,iBAAiB;;AAErC;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,gBAAgB,IAAI,MAAM;EAC/CC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACT,OAAO,CAACU,GAAG,CAC1BC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGf,KAAK,CAACgB,KAAK,CAACD,KAAK;EAC/B,IAAIA,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA;EACAE,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEJ,MAAM,CAAC;EACtC,OAAOA,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,GAAG,CAACQ,YAAY,CAACU,QAAQ,CAACT,GAAG,CAC3BS,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EACzBJ,KAAK,IAAI;EACPF,OAAO,CAACE,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,IAAIA,KAAK,CAACK,IAAI,KAAK,cAAc,EAAE;IACjCP,OAAO,CAACE,KAAK,CAAC,MAAM,CAAC;IACrBjB,OAAO,CAACiB,KAAK,CAAC,UAAU,CAAC;EAC3B,CAAC,MAAM,IAAIA,KAAK,CAACG,QAAQ,EAAE;IACzB,QAAQH,KAAK,CAACG,QAAQ,CAACG,MAAM;MAC3B,KAAK,GAAG;QACNzB,KAAK,CAAC0B,QAAQ,CAAC,QAAQ,CAAC;QACxBzB,MAAM,CAAC0B,IAAI,CAAC,QAAQ,CAAC;QACrBzB,OAAO,CAACiB,KAAK,CAAC,aAAa,CAAC;QAC5B;MACF,KAAK,GAAG;QACNjB,OAAO,CAACiB,KAAK,CAAC,WAAW,CAAC;QAC1B;MACF;QACEjB,OAAO,CAACiB,KAAK,CAACA,KAAK,CAACG,QAAQ,CAACC,IAAI,EAAEK,OAAO,IAAI,OAAO,CAAC;IAC1D;EACF,CAAC,MAAM,IAAIT,KAAK,CAAChB,OAAO,EAAE;IACxBc,OAAO,CAACE,KAAK,CAAC,SAAS,CAAC;IACxBjB,OAAO,CAACiB,KAAK,CAAC,cAAc,CAAC;EAC/B,CAAC,MAAM;IACLjB,OAAO,CAACiB,KAAK,CAAC,QAAQ,CAAC;EACzB;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMU,IAAI,GAAG;EACXC,UAAU,EAAEA,CAAA,KAAM3B,OAAO,CAAC4B,GAAG,CAAC,WAAW;EACzC;AACF,CAAC;;AAED;AACA,MAAMH,OAAO,GAAG;EACdI,WAAW,EAAEA,CAAA,KAAM7B,OAAO,CAAC4B,GAAG,CAAC,WAAW;EAC1C;AACF,CAAC;AAED,eAAe;EACb;EACAE,KAAK,EAAGV,IAAI,IAAKpB,OAAO,CAAC+B,IAAI,CAAC,aAAa,EAAEX,IAAI,CAAC;EAClDY,QAAQ,EAAGZ,IAAI,IAAKpB,OAAO,CAAC+B,IAAI,CAAC,gBAAgB,EAAEX,IAAI,CAAC;EAExD;EACAM,IAAI;EACJD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}