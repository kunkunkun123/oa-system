{"ast":null,"code":"import axios from 'axios';\nimport { Message } from 'element-ui';\nimport store from '@/store';\nimport router from '@/router';\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: '/api',\n  // API 的基础URL\n  timeout: 5000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  const token = store.state.token;\n  if (token) {\n    config.headers['Authorization'] = 'Bearer ' + token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => response.data, error => {\n  console.log('API Error:', error);\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // token 失效，清除 token 并跳转到登录页\n        store.dispatch('resetToken');\n        router.push('/login');\n        Message.error('登录已过期，请重新登录');\n        break;\n      case 403:\n        Message.error('没有权限执行此操作');\n        break;\n      case 404:\n        Message.error('请求的资源不存在');\n        break;\n      case 500:\n        Message.error('服务器内部错误');\n        break;\n      default:\n        Message.error(error.response.data.message || '请求失败');\n    }\n  } else {\n    Message.error('网络错误，请检查您的网络连接');\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","Message","store","router","service","create","baseURL","timeout","interceptors","request","use","config","token","state","headers","error","Promise","reject","response","data","console","log","status","dispatch","push","message"],"sources":["D:/oasystem/src/main/resources/static/frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { Message } from 'element-ui'\nimport store from '@/store'\nimport router from '@/router'\n\n// 创建 axios 实例\nconst service = axios.create({\n  baseURL: '/api', // API 的基础URL\n  timeout: 5000 // 请求超时时间\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const token = store.state.token\n    if (token) {\n      config.headers['Authorization'] = 'Bearer ' + token\n    }\n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => response.data,\n  error => {\n    console.log('API Error:', error)\n    \n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          // token 失效，清除 token 并跳转到登录页\n          store.dispatch('resetToken')\n          router.push('/login')\n          Message.error('登录已过期，请重新登录')\n          break\n          \n        case 403:\n          Message.error('没有权限执行此操作')\n          break\n          \n        case 404:\n          Message.error('请求的资源不存在')\n          break\n          \n        case 500:\n          Message.error('服务器内部错误')\n          break\n          \n        default:\n          Message.error(error.response.data.message || '请求失败')\n      }\n    } else {\n      Message.error('网络错误，请检查您的网络连接')\n    }\n    \n    return Promise.reject(error)\n  }\n)\n\nexport default service "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC3BC,OAAO,EAAE,MAAM;EAAE;EACjBC,OAAO,EAAE,IAAI,CAAC;AAChB,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGV,KAAK,CAACW,KAAK,CAACD,KAAK;EAC/B,IAAIA,KAAK,EAAE;IACTD,MAAM,CAACG,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGF,KAAK;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACDI,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,OAAO,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC/BQ,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EACzBJ,KAAK,IAAI;EACPK,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEN,KAAK,CAAC;EAEhC,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB,QAAQH,KAAK,CAACG,QAAQ,CAACI,MAAM;MAC3B,KAAK,GAAG;QACN;QACApB,KAAK,CAACqB,QAAQ,CAAC,YAAY,CAAC;QAC5BpB,MAAM,CAACqB,IAAI,CAAC,QAAQ,CAAC;QACrBvB,OAAO,CAACc,KAAK,CAAC,aAAa,CAAC;QAC5B;MAEF,KAAK,GAAG;QACNd,OAAO,CAACc,KAAK,CAAC,WAAW,CAAC;QAC1B;MAEF,KAAK,GAAG;QACNd,OAAO,CAACc,KAAK,CAAC,UAAU,CAAC;QACzB;MAEF,KAAK,GAAG;QACNd,OAAO,CAACc,KAAK,CAAC,SAAS,CAAC;QACxB;MAEF;QACEd,OAAO,CAACc,KAAK,CAACA,KAAK,CAACG,QAAQ,CAACC,IAAI,CAACM,OAAO,IAAI,MAAM,CAAC;IACxD;EACF,CAAC,MAAM;IACLxB,OAAO,CAACc,KAAK,CAAC,gBAAgB,CAAC;EACjC;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}